import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_predict
from sklearn.preprocessing import StandardScaler, PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.impute import SimpleImputer
import mlflow
import mlflow.sklearn
import streamlit as st
import plotly.express as px
from sklearn.metrics import mean_squared_error, r2_score
import os

class TitanicAnalyzer:
    def __init__(self):
        self.data = None
        self.model = None
        self.scaler = None  # S·∫Ω kh·ªüi t·∫°o sau khi c√≥ d·ªØ li·ªáu
        self.poly = None
        self.feature_columns = ['Pclass', 'Age', 'SibSp', 'Parch', 'Fare']
        self.is_fitted = False
    
    def load_and_preprocess(self, data_path):
        """ƒê·ªçc v√† ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu v·ªõi MLflow"""
        try:
            mlflow.start_run()
            st.write("##### **üìöTi·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu**")
            
            # ƒê·ªçc d·ªØ li·ªáu
            st.write("**1. ƒê·ªçc d·ªØ li·ªáu**")
            self.data = pd.read_csv(data_path)
            mlflow.log_param("initial_data_shape", self.data.shape)
            st.write("D·ªØ li·ªáu ban ƒë·∫ßu:", self.data.head())
            
            # X·ª≠ l√Ω missing values
            st.write("**2. X·ª≠ l√Ω gi√° tr·ªã b·ªã thi·∫øu**")
            st.write("- C√°c c·ªôt d·ªØ li·ªáu b·ªã thi·∫øu: Age, Cabin, Embarked")
            missing_values_before = self.data.isnull().sum()
            st.write("S·ªë l∆∞·ª£ng d·ªØ li·ªáu b·ªã thi·∫øu : ")
            st.dataframe(missing_values_before.to_frame().T)

            # Ch·ªçn ph∆∞∆°ng ph√°p x·ª≠ l√Ω gi√° tr·ªã b·ªã thi·∫øu
            missing_value_strategy = st.selectbox(
                "## Ch·ªçn ph∆∞∆°ng ph√°p ", ["mean", "median", "mode", "drop"], index=0
            )

            # H√†m x·ª≠ l√Ω d·ªØ li·ªáu b·ªã thi·∫øu
            def preprocess_data(df, missing_value_strategy):
                df = df.dropna(subset=['Survived'])  # B·ªè c√°c h√†ng c√≥ gi√° tr·ªã thi·∫øu ·ªü c·ªôt m·ª•c ti√™u

                # X√°c ƒë·ªãnh c·ªôt s·ªë v√† c·ªôt ph√¢n lo·∫°i
                num_cols = df.select_dtypes(include=['number']).columns
                cat_cols = df.select_dtypes(exclude=['number']).columns

                # X·ª≠ l√Ω gi√° tr·ªã thi·∫øu cho c·ªôt s·ªë
                if missing_value_strategy == 'mean':
                    df[num_cols] = df[num_cols].fillna(df[num_cols].mean())
                elif missing_value_strategy == 'median':
                    df[num_cols] = df[num_cols].fillna(df[num_cols].median())
                elif missing_value_strategy == 'mode':
                    for col in num_cols:
                        if not df[col].mode().dropna().empty:
                            df[col] = df[col].fillna(df[col].mode()[0])

                # Lu√¥n x·ª≠ l√Ω gi√° tr·ªã thi·∫øu cho Cabin v√† Embarked
                df['Cabin'] = df['Cabin'].fillna("Unknown")  # ƒêi·ªÅn "Unknown" cho Cabin
                if not df['Embarked'].mode().dropna().empty:
                    df['Embarked'] = df['Embarked'].fillna(df['Embarked'].mode()[0])  # ƒêi·ªÅn mode() cho Embarked

                if missing_value_strategy == 'drop':
                    df.dropna(inplace=True)  # N·∫øu ch·ªçn "drop", x√≥a h√†ng c√≤n thi·∫øu

                return df  # Tr·∫£ v·ªÅ dataframe ƒë√£ x·ª≠ l√Ω

            # G·ªçi h√†m x·ª≠ l√Ω d·ªØ li·ªáu b·ªã thi·∫øu
            self.data = preprocess_data(self.data, missing_value_strategy)

            # Ki·ªÉm tra s·ªë l∆∞·ª£ng d·ªØ li·ªáu b·ªã thi·∫øu sau khi x·ª≠ l√Ω
            missing_values_after = self.data.isnull().sum().sum()
            mlflow.log_metric("missing_values_before", missing_values_before.sum())  # Chuy·ªÉn th√†nh s·ªë t·ªïng
            mlflow.log_metric("missing_values_after", missing_values_after)
            st.write("S·ªë l∆∞·ª£ng gi√° tr·ªã b·ªã thi·∫øu sau x·ª≠ l√Ω:")
            st.dataframe(self.data.isnull().sum().to_frame().T)


            # X√≥a c√°c c·ªôt kh√¥ng c·∫ßn thi·∫øt
            st.write("**3. X√≥a c√°c c·ªôt kh√¥ng c·∫ßn thi·∫øt**")
            st.write("""
            - **Name**: T√™n h√†nh kh√°ch kh√¥ng ·∫£nh h∆∞·ªüng tr·ª±c ti·∫øp ƒë·∫øn kh·∫£ nƒÉng s·ªëng s√≥t.
            - **Ticket**: S·ªë v√© l√† m·ªôt chu·ªói k√Ω t·ª± kh√¥ng mang √Ω nghƒ©a r√µ r√†ng ƒë·ªëi v·ªõi m√¥ h√¨nh d·ª± ƒëo√°n.
            - **Cabin**: D·ªØ li·ªáu b·ªã thi·∫øu qu√° nhi·ªÅu, r·∫•t nhi·ªÅu h√†nh kh√°ch kh√¥ng c√≥ th√¥ng tin v·ªÅ cabin.
            """)

            # Cho ph√©p ng∆∞·ªùi d√πng ch·ªçn c·ªôt ƒë·ªÉ x√≥a
            columns_to_drop = st.multiselect(
                "Ch·ªçn c·ªôt ƒë·ªÉ x√≥a:",
                self.data.columns.tolist(),  
                default=['Name', 'Ticket', 'Cabin']  # G·ª£i √Ω m·∫∑c ƒë·ªãnh
            )

            # X√≥a c√°c c·ªôt ƒë∆∞·ª£c ch·ªçn
            self.data.drop(columns=columns_to_drop, inplace=True, errors='ignore')

            # Hi·ªÉn th·ªã th√¥ng tin sau khi x√≥a c·ªôt
            st.write("D·ªØ li·ªáu sau khi x√≥a c√°c c·ªôt kh√¥ng c·∫ßn thi·∫øt:")
            st.dataframe(self.data.head())

            
            st.write("**4. M√£ h√≥a bi·∫øn ph√¢n lo·∫°i** ")
            
            st.write(""" -C·ªôt Sex:
                \n'male' ‚Üí 0
                \n'female' ‚Üí 1""")
            st.write(""" -C·ªôt Embarked:
                \n'C' ‚Üí 0
                \n'Q' ‚Üí 1
                \n'S' ‚Üí 2 """)
            # M√£ h√≥a bi·∫øn ph√¢n lo·∫°i 'Sex'
            if 'Sex' in self.data.columns:
                self.data['Sex'] = self.data['Sex'].map({'male': 0, 'female': 1})

            # ƒêi·ªÅn gi√° tr·ªã thi·∫øu cho 'Embarked' v√† m√£ h√≥a
            if 'Embarked' in self.data.columns:
                self.data['Embarked'] = self.data['Embarked'].fillna('Unknown')

                # Ch·ªâ m√£ h√≥a c√°c gi√° tr·ªã h·ª£p l·ªá, tr√°nh l·ªói khi c√≥ gi√° tr·ªã ngo√†i danh s√°ch
                embarked_mapping = {'C': 0, 'Q': 1, 'S': 2}
                self.data['Embarked'] = self.data['Embarked'].map(lambda x: embarked_mapping.get(x, -1))

            # Hi·ªÉn th·ªã d·ªØ li·ªáu sau khi m√£ h√≥a
            st.write("D·ªØ li·ªáu sau khi m√£ h√≥a:")
            st.dataframe(self.data.head())


            
            mlflow.end_run()
            return self.data
            
        except Exception as e:
            st.error(f"L·ªói khi ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu: {str(e)}")
            mlflow.end_run(status='FAILED')
            return None


def create_streamlit_app():
    st.title("Titanic üö¢")
    
    # S·ª≠ d·ª•ng st.tabs ƒë·ªÉ t·∫°o thanh menu
    tab1, tab2, tab3 = st.tabs([ "üîç X·ª≠ l√Ω v√† Hu·∫•n luy·ªán ","ü™Ñ D·ª± ƒëo√°n", "üöÄ MLflow"])
    analyzer = TitanicAnalyzer()
        
    with tab1:
        data_path = "G:/ML/MLFlow/my_env/titanic.csv"  # ƒê∆∞·ªùng d·∫´n c·ªë ƒë·ªãnh
        analyzer = TitanicAnalyzer()
        data = analyzer.load_and_preprocess(data_path)
        total_samples = len(data) 
        # Cho ph√©p ng∆∞·ªùi d√πng ch·ªçn t·ª∑ l·ªá chia d·ªØ li·ªáu
        st.write("##### üìä Ch·ªçn t·ª∑ l·ªá chia d·ªØ li·ªáu")
        train_size = st.slider("T·∫≠p hu·∫•n luy·ªán (Train)", 0.5, 0.8, 0.7)
        valid_size = st.slider("T·∫≠p ki·ªÉm ƒë·ªãnh (Validation)", 0.1, 0.3, 0.15)
        test_size = 1 - train_size - valid_size

        if test_size < 0:
            st.error("‚ùå T·ªïng t·ª∑ l·ªá Train v√† Validation kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 1.")
        else:
            # T√≠nh s·ªë l∆∞·ª£ng m·∫´u
            train_samples = int(train_size * total_samples)
            valid_samples = int(valid_size * total_samples)
            test_samples = total_samples - train_samples - valid_samples

            # T·∫°o DataFrame hi·ªÉn th·ªã k·∫øt qu·∫£
            split_df = pd.DataFrame({
                "T·∫≠p d·ªØ li·ªáu": ["Train", "Validation", "Test"],
                "T·ª∑ l·ªá (%)": [f"{train_size * 100:.2f}", f"{valid_size * 100:.2f}", f"{test_size * 100:.2f}"],
                "S·ªë l∆∞·ª£ng m·∫´u": [train_samples, valid_samples, test_samples]
            })

            # Hi·ªÉn th·ªã b·∫£ng k·∫øt qu·∫£
            st.write("üìã **T·ª∑ l·ªá chia d·ªØ li·ªáu v√† s·ªë l∆∞·ª£ng m·∫´u:**")
            st.table(split_df)

        # Hi·ªÉn th·ªã k·∫øt qu·∫£ trong Streamlit
        st.write("##### üìä **Hu·∫•n luy·ªán m√¥ h√¨nh h·ªìi quy**")
        # L·ª±a ch·ªçn m√¥ h√¨nh
        regression_type = st.radio("Ch·ªçn lo·∫°i h·ªìi quy:", ["Multiple Regression", "Polynomial Regression"])

        # Ch·ªçn b·∫≠c c·ªßa Polynomial Regression (ch·ªâ hi·ªÉn th·ªã n·∫øu ch·ªçn Polynomial)
        degree = None
        if regression_type == "Polynomial Regression":
            degree = st.slider("Ch·ªçn b·∫≠c c·ªßa h·ªìi quy ƒëa th·ª©c:", min_value=2, max_value=5, value=2)

        # Load d·ªØ li·ªáu v√† chia train/valid/test
        X = data.drop(columns=["Survived"])
        y = data["Survived"]

        X_train, X_temp, y_train, y_temp = train_test_split(X, y, train_size=train_size, random_state=42)
        X_valid, X_test, y_valid, y_test = train_test_split(X_temp, y_temp, train_size=valid_size / (valid_size + test_size), random_state=42)

        # Chu·∫©n h√≥a d·ªØ li·ªáu
        scaler = StandardScaler()
        X_train_scaled = scaler.fit_transform(X_train)
        X_valid_scaled = scaler.transform(X_valid)
        X_test_scaled = scaler.transform(X_test)

        # L∆∞u scaler v√†o session_state
        st.session_state["scaler"] = scaler

        with mlflow.start_run():
            # Ch·ªçn m√¥ h√¨nh d·ª±a tr√™n lo·∫°i h·ªìi quy
            if regression_type == "Polynomial Regression":
                poly = PolynomialFeatures(degree=degree)
                X_train_poly = poly.fit_transform(X_train_scaled)
                X_valid_poly = poly.transform(X_valid_scaled)
                X_test_poly = poly.transform(X_test_scaled)

                model = LinearRegression()
                model.fit(X_train_poly, y_train)

                y_pred_train = model.predict(X_train_poly)
                y_pred_valid = model.predict(X_valid_poly)
                y_pred_test = model.predict(X_test_poly)

            else:  # Multiple Regression
                model = LinearRegression()
                model.fit(X_train_scaled, y_train)

                y_pred_train = model.predict(X_train_scaled)
                y_pred_valid = model.predict(X_valid_scaled)
                y_pred_test = model.predict(X_test_scaled)

            # L∆∞u m√¥ h√¨nh v√†o session_state
            st.session_state["model"] = model
            if regression_type == "Polynomial Regression":
                st.session_state["poly"] = poly

            # T√≠nh to√°n metrics
            mse_train = mean_squared_error(y_train, y_pred_train)
            mse_valid = mean_squared_error(y_valid, y_pred_valid)
            mse_test = mean_squared_error(y_test, y_pred_test)

            r2_train = r2_score(y_train, y_pred_train)
            r2_valid = r2_score(y_valid, y_pred_valid)
            r2_test = r2_score(y_test, y_pred_test)

            # Cross-validation
            y_pred_cv = cross_val_predict(model, X_train_scaled, y_train, cv=5)
            mse_cv = mean_squared_error(y_train, y_pred_cv)

            # Ghi log v√†o MLflow
            mlflow.log_metrics({
                "train_mse": mse_train,
                "valid_mse": mse_valid,
                "test_mse": mse_test,
                "cv_mse": mse_cv
            })

            st.write(f"**Lo·∫°i h·ªìi quy ƒëang s·ª≠ d·ª•ng:** {regression_type}")
            
            results_df = pd.DataFrame({
                "Metric": ["MSE (Train)", "MSE (Validation)", "MSE (Test)", "MSE (Cross-Validation)"],
                "Value": [mse_train, mse_valid, mse_test, mse_cv]
            })

            st.write("**üìå K·∫øt qu·∫£ ƒë√°nh gi√° m√¥ h√¨nh:**")
            st.table(results_df)
    with tab2 :             
            # Prediction interface
            st.subheader("Giao di·ªán d·ª± ƒëo√°n")
# Ki·ªÉm tra n·∫øu m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán tr∆∞·ªõc khi d·ª± ƒëo√°n
            if 'model' in st.session_state and 'scaler' in st.session_state:
                analyzer.model = st.session_state['model']
                analyzer.scaler = st.session_state['scaler']
                if regression_type == "Polynomial Regression":
                    analyzer.poly = st.session_state['poly']
                analyzer.is_fitted = True
            else:
                st.error("Vui l√≤ng hu·∫•n luy·ªán m√¥ h√¨nh tr∆∞·ªõc khi d·ª± ƒëo√°n!")

            if analyzer.is_fitted:
                col1, col2 = st.columns(2)

                with col1:
                    pclass = st.selectbox("Passenger Class", [1, 2, 3])
                    age = st.number_input("Age", 0, 100, 30)
                    sex = st.selectbox("Sex", ["male", "female"])
                
                with col2:
                    sibsp = st.number_input("Siblings/Spouses", 0, 10, 0)
                    parch = st.number_input("Parents/Children", 0, 10, 0)
                    fare = st.number_input("Fare", 0.0, 500.0, 32.0)
                    embarked = st.selectbox("Port of Embarkation", ['C', 'Q', 'S'])
                
                if st.button("Predict"):
                    # M√£ h√≥a d·ªØ li·ªáu ƒë·∫ßu v√†o
                    sex_encoded = 1 if sex == "female" else 0  # M√£ h√≥a Sex: male -> 0, female -> 1
                    embarked_encoded = {'C': 0, 'Q': 1, 'S': 2}.get(embarked, -1)  # M√£ h√≥a Embarked

                    # T·∫°o DataFrame ƒë·∫ßu v√†o
                    input_data = pd.DataFrame({
                        'Pclass': [pclass],
                        'Age': [age],
                        'SibSp': [sibsp],
                        'Parch': [parch],
                        'Fare': [fare],
                        'Sex': [sex_encoded],
                        'Embarked': [embarked_encoded]
                    })

                    # Scale d·ªØ li·ªáu ƒë·∫ßu v√†o
                    input_scaled = st.session_state['scaler'].transform(input_data)
                    
                    # Ki·ªÉm tra xem m√¥ h√¨nh c√≥ s·ª≠ d·ª•ng PolynomialFeatures kh√¥ng
                    if regression_type == "Polynomial Regression":
                        input_transformed = st.session_state['poly'].transform(input_scaled)
                    else:
                        input_transformed = input_scaled

                    # D·ª± ƒëo√°n
                    prediction = st.session_state['model'].predict(input_transformed)[0]
                    
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£
                    st.success(f"D·ª± ƒëo√°n : {'Survived' if prediction == 1 else 'Not Survived'}")

    with tab3:
        # Hi·ªÉn th·ªã MLflow Tracking UI trong iframe
        mlflow_url = "http://localhost:5000"  # Thay ƒë·ªïi n·∫øu ch·∫°y tr√™n server kh√°c
        st.markdown(f'<iframe src="{mlflow_url}" width="800" height="400"></iframe>', unsafe_allow_html=True)

if __name__ == "__main__":
    create_streamlit_app()
