import streamlit as st
import mlflow
import mlflow.sklearn
import numpy as np
import cv2
from sklearn.datasets import fetch_openml
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from streamlit_drawable_canvas import st_canvas
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics.pairwise import cosine_similarity
from streamlit_tags import st_tags
import io
import os
import tempfile

# T·∫°o selectbox ƒë·ªÉ ch·ªçn d·ª± √°n
option = st.sidebar.selectbox(
    "üìå Ch·ªçn m·ªôt d·ª± √°n ƒë·ªÉ th·ª±c hi·ªán:",
    ["Ph√¢n t√≠ch Titanic", "MNIST"]
)

# Hi·ªÉn th·ªã n·ªôi dung t∆∞∆°ng ·ª©ng v·ªõi l·ª±a ch·ªçn
if option == "Ph√¢n t√≠ch Titanic":
    st.write("üö¢ **B·∫°n ƒë√£ ch·ªçn d·ª± √°n: Ph√¢n t√≠ch d·ªØ li·ªáu Titanic!**")
    # Th√™m code ph√¢n t√≠ch d·ªØ li·ªáu Titanic t·∫°i ƒë√¢y

elif option == "MNIST":
# üìå T·∫£i v√† x·ª≠ l√Ω d·ªØ li·ªáu MNIST t·ª´ OpenML
    @st.cache_data
    def load_data():
        mnist = fetch_openml("mnist_784", version=1, as_frame=False)
        X, y = mnist.data, mnist.target.astype(int)  # Chuy·ªÉn nh√£n v·ªÅ ki·ªÉu s·ªë nguy√™n
        X = X / 255.0  # Chu·∫©n h√≥a v·ªÅ [0,1]
        return X, y

    # üìå Chia d·ªØ li·ªáu th√†nh train, validation, v√† test
    def split_data(X, y, train_size=0.7, val_size=0.15, test_size=0.15, random_state=42):
        """
        Chia d·ªØ li·ªáu th√†nh 3 t·∫≠p: train, validation, v√† test.

        """
        # Chia t·∫≠p train v√† t·∫≠p t·∫°m (temp)
        X_train, X_temp, y_train, y_temp = train_test_split(
            X, y, train_size=train_size, random_state=random_state
        )
        
        # Chia t·∫≠p t·∫°m th√†nh validation v√† test
        val_ratio = val_size / (val_size + test_size)
        X_val, X_test, y_val, y_test = train_test_split(
            X_temp, y_temp, train_size=val_ratio, random_state=random_state
        )
        
        return X_train, X_val, X_test, y_train, y_val, y_test

    # üìå Hu·∫•n luy·ªán m√¥ h√¨nh
    def train_model(model_name, X_train, X_val, X_test, y_train, y_val, y_test):
        if model_name == "Decision Tree":
            model = DecisionTreeClassifier(
                    max_depth=15,           
                    min_samples_split=5,    
                    min_samples_leaf=2,     
                    random_state=42
                
            )
        elif model_name == "SVM":
            model = SVC(kernel="linear", probability=True)
        else:
            raise ValueError("Invalid model selected!")

        model.fit(X_train, y_train)

        y_train_pred =model.predict(X_train)
        y_test_pred = model.predict(X_test)
        y_val_pred = model.predict(X_val)
        # T√≠nh ƒë·ªô ch√≠nh x√°c
        train_accuracy = accuracy_score(y_train, y_train_pred)
        val_accuracy = accuracy_score(y_val, y_val_pred)
        test_accuracy = accuracy_score(y_test, y_test_pred)
        
        # L∆∞u m√¥ h√¨nh v√†o MLFlow
        with mlflow.start_run(run_name="MNIST_Classification"):
            mlflow.log_param("model_name", model_name)
            mlflow.log_metric("train_accuracy", train_accuracy)
            mlflow.log_metric("val_accuracy", val_accuracy)
            mlflow.log_metric("test_accuracy", test_accuracy)
            mlflow.sklearn.log_model(model, model_name)
        
        return model, train_accuracy, val_accuracy, test_accuracy

    # üìå X·ª≠ l√Ω ·∫£nh t·∫£i l√™n
    def preprocess_uploaded_image(image):
        image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        image = cv2.resize(image, (28, 28))
        image = image / 255.0
        return image.reshape(1, -1)

    # üìå X·ª≠ l√Ω ·∫£nh t·ª´ v·∫Ω tay tr√™n canvas
    def preprocess_canvas_image(canvas):
        image = np.array(canvas)
        image = cv2.cvtColor(image, cv2.COLOR_RGBA2GRAY)
        image = cv2.bitwise_not(image)
        image = cv2.resize(image, (28, 28))
        image = image / 255.0
        return image.reshape(1, -1)

    def show_sample_images(X, y):
        st.write("**üñºÔ∏è M·ªôt v√†i m·∫´u d·ªØ li·ªáu t·ª´ MNIST**")
        fig, axes = plt.subplots(1, 10, figsize=(15, 3))
        for digit in range(10):
            idx = np.where(y == digit)[0][0]
            ax = axes[digit]
            ax.imshow(X[idx].reshape(28, 28), cmap='gray')
            ax.set_title(f"{digit}")
            ax.axis('off')
        st.pyplot(fig)

        
    # üìå So s√°nh c√°c s·ªë c√≥ t√≠nh t∆∞∆°ng ƒë·ªìng
    def show_similar_digits(X, y):
        st.write("**üîç So s√°nh c√°c s·ªë t∆∞∆°ng ƒë·ªìng v√† d·ªÖ g√¢y nh·∫ßm l·∫´n**")
        # Cho ph√©p ng∆∞·ªùi d√πng ch·ªçn s·ªë tham chi·∫øu
        reference_number = st.selectbox("Ch·ªçn s·ªë tham chi·∫øu (0-9):", options=list(range(10)))
        
        # L·∫•y t·∫•t c·∫£ c√°c m·∫´u c·ªßa s·ªë tham chi·∫øu
        reference_indices = np.where(y == reference_number)[0]
        
        # Ch·ªçn ng·∫´u nhi√™n m·ªôt m·∫´u t·ª´ s·ªë tham chi·∫øu
        reference_idx = np.random.choice(reference_indices)
        reference_image = X[reference_idx].reshape(1, -1)
        
        # T√≠nh to√°n cosine similarity gi·ªØa ·∫£nh tham chi·∫øu v√† to√†n b·ªô t·∫≠p d·ªØ li·ªáu
        similarities = cosine_similarity(reference_image, X)[0]
        
        # L·ªçc ra c√°c ·∫£nh kh√¥ng ph·∫£i l√† s·ªë tham chi·∫øu
        non_reference_indices = np.where(y != reference_number)[0]
        non_reference_similarities = similarities[non_reference_indices]
        
        # L·∫•y ch·ªâ s·ªë c·ªßa 5 ·∫£nh c√≥ ƒë·ªô t∆∞∆°ng ƒë·ªìng cao nh·∫•t (kh√¥ng ph·∫£i s·ªë tham chi·∫øu)
        top_similar_indices = non_reference_indices[np.argsort(non_reference_similarities)[-5:][::-1]]
        
        # Hi·ªÉn th·ªã ·∫£nh tham chi·∫øu v√† c√°c ·∫£nh t∆∞∆°ng ƒë·ªìng
        st.write(f"S·ªë tham chi·∫øu: {reference_number}")
        fig, axes = plt.subplots(1, 6, figsize=(15, 3))
        
        # Hi·ªÉn th·ªã ·∫£nh tham chi·∫øu
        axes[0].imshow(reference_image.reshape(28, 28), cmap='gray')
        axes[0].set_title(f"Tham chi·∫øu: {reference_number}")
        axes[0].axis('off')
        
        # Hi·ªÉn th·ªã c√°c ·∫£nh t∆∞∆°ng ƒë·ªìng
        for i, idx in enumerate(top_similar_indices, start=1):
            axes[i].imshow(X[idx].reshape(28, 28), cmap='gray')
            axes[i].set_title(f"Gi·ªëng: {similarities[idx]:.2f}\nS·ªë: {y[idx]}")
            axes[i].axis('off')
        
        st.pyplot(fig)
        
        # Gi·∫£i th√≠ch s·ª± nh·∫ßm l·∫´n
        st.write(f"**‚ùóS·ªë {reference_number}** c√≥ th·ªÉ b·ªã nh·∫ßm l·∫´n v·ªõi c√°c s·ªë tr√™n do h√¨nh d·∫°ng t∆∞∆°ng t·ª±, ch·∫≥ng h·∫°n nh∆∞ n√©t cong, ƒë·ªô d√†y n√©t, ho·∫∑c c·∫•u tr√∫c chung.")


    # H√†m x·ª≠ l√Ω ·∫£nh theo l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng
    def preprocess_image(image, methods):
        processed_image = image.copy()

        if "Gaussian Blur" in methods:
            processed_image = cv2.GaussianBlur(processed_image, (3, 3), 0)

        if "Sobel" in methods:
            sobelx = cv2.Sobel(processed_image, cv2.CV_64F, 1, 0, ksize=3)
            sobely = cv2.Sobel(processed_image, cv2.CV_64F, 0, 1, ksize=3)
            processed_image = np.sqrt(sobelx**2 + sobely**2)
            processed_image = np.uint8(processed_image / processed_image.max() * 255)

        if "Binarization" in methods:
            _, processed_image = cv2.threshold(processed_image, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

        return processed_image
    def display_mlflow_experiments():
        try:
            # L·∫•y danh s√°ch c√°c th√≠ nghi·ªám t·ª´ MLflow
            experiments = mlflow.list_experiments()
            
            if experiments:
                st.write("#### Danh s√°ch th√≠ nghi·ªám")
                experiment_data = []
                for exp in experiments:
                    experiment_data.append({
                        "Experiment ID": exp.experiment_id,
                        "Experiment Name": exp.name,
                        "Artifact Location": exp.artifact_location
                    })
                st.dataframe(pd.DataFrame(experiment_data))
                
                # Ch·ªçn th√≠ nghi·ªám ƒë·ªÉ xem chi ti·∫øt
                selected_exp_id = st.selectbox(
                    "üîç Ch·ªçn th√≠ nghi·ªám ƒë·ªÉ xem chi ti·∫øt",
                    options=[exp.experiment_id for exp in experiments]
                )
                
                # L·∫•y danh s√°ch runs trong th√≠ nghi·ªám ƒë√£ ch·ªçn
                runs = mlflow.search_runs(selected_exp_id)
                if not runs.empty:
                    st.write("#### Danh s√°ch runs")
                    st.dataframe(runs)
                    
                    # Ch·ªçn run ƒë·ªÉ xem chi ti·∫øt
                    selected_run_id = st.selectbox(
                        "üîç Ch·ªçn run ƒë·ªÉ xem chi ti·∫øt",
                        options=runs["run_id"]
                    )
                    
                    # Hi·ªÉn th·ªã chi ti·∫øt run
                    run = mlflow.get_run(selected_run_id)
                    st.write("##### Th√¥ng tin run")
                    st.write(f"**Run ID:** {run.info.run_id}")
                    st.write(f"**Experiment ID:** {run.info.experiment_id}")
                    st.write(f"**Start Time:** {run.info.start_time}")
                    
                    # Hi·ªÉn th·ªã metrics
                    st.write("##### Metrics")
                    st.json(run.data.metrics)
                    
                    # Hi·ªÉn th·ªã params
                    st.write("##### Params")
                    st.json(run.data.params)
                    
                    # Hi·ªÉn th·ªã artifacts
                    artifacts = mlflow.list_artifacts(selected_run_id)
                    if artifacts:
                        st.write("##### Artifacts")
                        for artifact in artifacts:
                            st.write(f"- {artifact.path}")
                    else:
                        st.write("Kh√¥ng c√≥ artifacts n√†o.")
                else:
                    st.warning("Kh√¥ng c√≥ runs n√†o trong th√≠ nghi·ªám n√†y.")
            else:
                st.warning("Kh√¥ng c√≥ th√≠ nghi·ªám n√†o ƒë∆∞·ª£c t√¨m th·∫•y.")
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói khi l·∫•y danh s√°ch th√≠ nghi·ªám: {e}")

    # üìå Giao di·ªán Streamlit
    def main():
        st.title("üî¢ Ph√¢n lo·∫°i ch·ªØ s·ªë vi·∫øt tay")
        
        # # Load d·ªØ li·ªáu
        X, y = load_data()
        # T·∫°o c√°c tab
        tab1, tab2 ,tab3= st.tabs(["üìã Hu·∫•n luy·ªán", "üîÆ D·ª± ƒëo√°n","‚ö° Mlflow"])
        with tab1:
            st.write(f"**S·ªë l∆∞·ª£ng m·∫´u c·ªßa b·ªô d·ªØ li·ªáu MNIST : {X.shape[0]}**")
            # Hi·ªÉn th·ªã m·∫´u d·ªØ li·ªáu v√† ph√¢n ph·ªëi d·ªØ li·ªáu
            show_sample_images(X, y)

            # So s√°nh c√°c s·ªë t∆∞∆°ng ƒë·ªìng
            show_similar_digits(X, y)

            # Cho ph√©p ng∆∞·ªùi d√πng ch·ªçn 2 s·ªë v√† hi·ªÉn th·ªã s·ª± t∆∞∆°ng ƒë·ªìng
            st.write("**üîç So s√°nh s·ª± t∆∞∆°ng ƒë·ªìng gi·ªØa 2 s·ªë**")
            st.write("- C√°c c·∫∑p s·ªë c√≥ s·ª± t∆∞∆°ng ƒë·ªìng : 0 v√† 6, 3 v√† 8, 5 v√† 6, 4 v√† 9 , 3 v√† 5,... ")
            col1, col2 = st.columns(2)
            with col1:
                num1 = st.selectbox("Ch·ªçn s·ªë th·ª© nh·∫•t", options=list(range(10)), index=0)
            with col2:
                num2 = st.selectbox("Ch·ªçn s·ªë th·ª© hai", options=list(range(10)), index=1)

            if st.button("üîç T√≠nh to√°n s·ª± t∆∞∆°ng ƒë·ªìng"):
                # L·∫•y c√°c m·∫´u ƒë·∫ßu ti√™n c·ªßa hai s·ªë ƒë∆∞·ª£c ch·ªçn
                idx1 = np.where(y == num1)[0][0]
                idx2 = np.where(y == num2)[0][0]

                # L·∫•y ·∫£nh c·ªßa hai s·ªë
                image1 = X[idx1].reshape(1, -1)
                image2 = X[idx2].reshape(1, -1)

                # T√≠nh to√°n cosine similarity
                similarity = cosine_similarity(image1, image2)[0][0]

                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                st.write(f"üî¢ S·ª± t∆∞∆°ng ƒë·ªìng gi·ªØa s·ªë {num1} v√† s·ªë {num2}: **{similarity:.4f}**")

                # Hi·ªÉn th·ªã ·∫£nh c·ªßa hai s·ªë
                fig, axes = plt.subplots(1, 2, figsize=(10, 5))
                axes[0].imshow(image1.reshape(28, 28), cmap='gray')
                axes[0].set_title(f"S·ªë {num1}")
                axes[0].axis('off')
                axes[1].imshow(image2.reshape(28, 28), cmap='gray')
                axes[1].set_title(f"S·ªë {num2}")
                axes[1].axis('off')
                st.pyplot(fig)
            
                    # Th√™m ph·∫ßn ch·ªçn k·ªπ thu·∫≠t x·ª≠ l√Ω ·∫£nh
            st.write("**üñºÔ∏è X·ª≠ l√Ω ·∫£nh**")
            st.markdown("""
    - **Sobel Operator** gi√∫p l√†m n·ªïi b·∫≠t c√°c c·∫°nh trong ·∫£nh b·∫±ng c√°ch ph√°t hi·ªán s·ª± thay ƒë·ªïi c∆∞·ªùng ƒë·ªô pixel.  
    - **Gaussian Blur** l√†m m·ªãn ·∫£nh v√† gi·∫£m nhi·ªÖu kh√¥ng mong mu·ªën, gi√∫p c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng h√¨nh ·∫£nh tr∆∞·ªõc khi x·ª≠ l√Ω ti·∫øp theo.  
    """)
            
            # Ch·ªçn k·ªπ thu·∫≠t x·ª≠ l√Ω ·∫£nh
            selected_preprocessing = st.multiselect(
            "Ch·ªçn k·ªπ thu·∫≠t x·ª≠ l√Ω d·ªØ li·ªáu:",
            options=["Sobel", "Gaussian Blur"],
            default=["Sobel", "Gaussian Blur"]
    )
            
            # Ch·ªçn m·ªôt ·∫£nh ng·∫´u nhi√™n t·ª´ t·∫≠p d·ªØ li·ªáu
            random_idx = np.random.choice(len(X))
            original_image = X[random_idx].reshape(28, 28)
            
            processed_image = preprocess_image(original_image, selected_preprocessing) if selected_preprocessing else original_image

            col1, col2 = st.columns(2)

        
            with col1:
                st.image(original_image, width=50, caption=f"S·ªë {y[random_idx]}", use_container_width=True, clamp=True)

            with col2:
                st.image(processed_image, width=50, caption="·∫¢nh sau x·ª≠ l√Ω", use_container_width=True, clamp=True)
            
            
                # Ch·ªçn t·ª∑ l·ªá d·ªØ li·ªáu hu·∫•n luy·ªán, validation, v√† test
            train_size = st.slider("T·ª∑ l·ªá hu·∫•n luy·ªán (%)", min_value=50, max_value=90, value=70, step=5)
            val_size = st.slider("T·ª∑ l·ªá validation (%)", min_value=5, max_value=30, value=15, step=5)
            test_size = 100 - train_size - val_size
            
            # Ki·ªÉm tra t·ª∑ l·ªá h·ª£p l·ªá
            if test_size <= 0:
                st.error("T·ª∑ l·ªá kh√¥ng h·ª£p l·ªá! Vui l√≤ng ƒëi·ªÅu ch·ªânh l·∫°i.")
                return
            
            # Load d·ªØ li·ªáu
            X, y = load_data()
            # L∆∞u t·ª∑ l·ªá d·ªØ li·ªáu v√†o session state
            st.session_state.train_size = train_size
            st.session_state.val_size = val_size
            st.session_state.test_size = test_size
            # Chia d·ªØ li·ªáu
            X_train, X_val, X_test, y_train, y_val, y_test = split_data(
                X, y, train_size=train_size/100, val_size=val_size/100, test_size=test_size/100)

            data_ratios = pd.DataFrame({
            "T·∫≠p d·ªØ li·ªáu": ["Train", "Validation", "Test"],
            "T·ª∑ l·ªá (%)": [st.session_state.train_size, st.session_state.val_size, st.session_state.test_size]
            })

            # Hi·ªÉn th·ªã b·∫£ng
            st.write("**üìä T·ª∑ l·ªá d·ªØ li·ªáu**")
            st.table(data_ratios)

            # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng m·∫´u
            st.write(f"üßÆ S·ªë l∆∞·ª£ng m·∫´u train: {len(X_train)}")
            st.write(f"üßÆ S·ªë l∆∞·ª£ng m·∫´u validation: {len(X_val)}")
            st.write(f"üßÆ S·ªë l∆∞·ª£ng m·∫´u test: {len(X_test)}")



            st.write("**üöÄ Hu·∫•n luy·ªán m√¥ h√¨nh**")
            model_name = st.selectbox("üîç Ch·ªçn m√¥ h√¨nh", ["Decision Tree", "SVM"])
            # Hu·∫•n luy·ªán m√¥ h√¨nh
            if st.button("üöÄ Hu·∫•n luy·ªán m√¥ h√¨nh"):
                with st.spinner("üîÑ ƒêang hu·∫•n luy·ªán..."):
                    model, train_accuracy, val_accuracy, test_accuracy = train_model(
                    model_name, X_train, X_val, X_test, y_train, y_val, y_test
                )
                st.success(f"‚úÖ Hu·∫•n luy·ªán xong!")
                
                # Hi·ªÉn th·ªã ƒë·ªô ch√≠nh x√°c tr√™n c·∫£ 3 t·∫≠p d·ªØ li·ªáu
                st.write(f"üéØ **ƒê·ªô ch√≠nh x√°c tr√™n t·∫≠p train: {train_accuracy:.4f}**")
                st.write(f"üéØ **ƒê·ªô ch√≠nh x√°c tr√™n t·∫≠p validation: {val_accuracy:.4f}**")
                st.write(f"üéØ **ƒê·ªô ch√≠nh x√°c tr√™n t·∫≠p test: {test_accuracy:.4f}**")

        with tab2:
            # Ch·ªçn ph∆∞∆°ng th·ª©c nh·∫≠p ·∫£nh
            option = st.radio("üñºÔ∏è Ch·ªçn ph∆∞∆°ng th·ª©c nh·∫≠p:", ["üìÇ T·∫£i ·∫£nh l√™n", "‚úèÔ∏è V·∫Ω s·ªë"])

            # üìÇ X·ª≠ l√Ω ·∫£nh t·∫£i l√™n
            if option == "üìÇ T·∫£i ·∫£nh l√™n":
                uploaded_file = st.file_uploader("üì§ T·∫£i ·∫£nh s·ªë vi·∫øt tay (PNG, JPG)", type=["png", "jpg", "jpeg"])

                if uploaded_file is not None:
                    image = cv2.imdecode(np.frombuffer(uploaded_file.read(), np.uint8), cv2.IMREAD_COLOR)
                    processed_image = preprocess_uploaded_image(image)
    
                    # Hi·ªÉn th·ªã ·∫£nh
                    st.image(image, caption="üì∑ ·∫¢nh t·∫£i l√™n", use_column_width=True)

                    # D·ª± ƒëo√°n s·ªë
                    if st.button("üîÆ D·ª± ƒëo√°n"):
                        model, _ = train_model(model_name, X_train, X_val, X_test, y_train, y_val, y_test)
                        prediction = model.predict(processed_image)[0]
                        probabilities = model.predict_proba(processed_image)[0]

                        st.write(f"üéØ **D·ª± ƒëo√°n: {prediction}**")
                        prob_df = pd.DataFrame({"Ch·ªØ s·ªë": list(range(10)), "X√°c su·∫•t (%)": probabilities * 100})
                        st.bar_chart(prob_df.set_index("Ch·ªØ s·ªë"))

                        # üìå Hi·ªÉn th·ªã c√°c s·ªë c√≥ th·ªÉ b·ªã nh·∫ßm l·∫´n
                        top_similar_numbers = get_top_similar_numbers(probabilities, top_n=3)
                        st.write("ü§î **S·ªë c√≥ th·ªÉ b·ªã nh·∫ßm l·∫´n:**")
                        for num, prob in top_similar_numbers:
                            st.write(f"üîπ {num} ({prob*100:.2f}%)")

            # ‚úèÔ∏è V·∫Ω s·ªë tr√™n canvas
            elif option == "‚úèÔ∏è V·∫Ω s·ªë":
                canvas_result = st_canvas(
                    fill_color="white",
                    stroke_width=15,
                    stroke_color="black",
                    background_color="white",
                    width=280,
                    height=280,
                    drawing_mode="freedraw",
                    key="canvas"
                )

                if st.button("üîÆ D·ª± ƒëo√°n"):
                    if canvas_result.image_data is not None:
                        processed_canvas = preprocess_canvas_image(canvas_result.image_data)

                        model, _ = train_model(model_name, X_train, X_val, y_train, y_val)
                        prediction = model.predict(processed_canvas)[0]
                        probabilities = model.predict_proba(processed_canvas)[0]

                        st.write(f"üéØ **D·ª± ƒëo√°n: {prediction}**")
                        prob_df = pd.DataFrame({"Ch·ªØ s·ªë": list(range(10)), "X√°c su·∫•t (%)": probabilities * 100})
                        st.bar_chart(prob_df.set_index("Ch·ªØ s·ªë"))

                        # üìå Hi·ªÉn th·ªã c√°c s·ªë c√≥ th·ªÉ b·ªã nh·∫ßm l·∫´n
                        top_similar_numbers = get_top_similar_numbers(probabilities, top_n=3)
                        st.write("ü§î **S·ªë c√≥ th·ªÉ b·ªã nh·∫ßm l·∫´n:**")
                        for num, prob in top_similar_numbers:
                            st.write(f"üîπ {num} ({prob*100:.2f}%)")

        with tab3:
            st.write("### üìä Tracking MLflow")
            
            try:
                # L·∫•y danh s√°ch th√≠ nghi·ªám t·ª´ MLflow
                experiments = mlflow.search_experiments()
                
                if experiments:
                    st.write("#### Danh s√°ch th√≠ nghi·ªám")
                    experiment_data = []
                    for exp in experiments:
                        experiment_data.append({
                            "Experiment ID": exp.experiment_id,
                            "Experiment Name": exp.name,
                            "Artifact Location": exp.artifact_location
                        })
                    st.dataframe(pd.DataFrame(experiment_data))
                    
                    # Ch·ªçn th√≠ nghi·ªám ƒë·ªÉ xem chi ti·∫øt
                    selected_exp_id = st.selectbox(
                        "üîç Ch·ªçn th√≠ nghi·ªám ƒë·ªÉ xem chi ti·∫øt",
                        options=[exp.experiment_id for exp in experiments]
                    )
                    
                    # L·∫•y danh s√°ch runs trong th√≠ nghi·ªám ƒë√£ ch·ªçn
                    runs = mlflow.search_runs(selected_exp_id)
                    if not runs.empty:
                        st.write("#### Danh s√°ch runs")
                        st.dataframe(runs)
                        
                        # Ch·ªçn run ƒë·ªÉ xem chi ti·∫øt
                        selected_run_id = st.selectbox(
                            "üîç Ch·ªçn run ƒë·ªÉ xem chi ti·∫øt",
                            options=runs["run_id"]
                        )
                        
                        # Hi·ªÉn th·ªã chi ti·∫øt run
                        run = mlflow.get_run(selected_run_id)
                        st.write("##### Th√¥ng tin run")
                        st.write(f"**Run ID:** {run.info.run_id}")
                        st.write(f"**Experiment ID:** {run.info.experiment_id}")
                        st.write(f"**Start Time:** {run.info.start_time}")
                        
                        # Hi·ªÉn th·ªã metrics
                        st.write("##### Metrics")
                        st.json(run.data.metrics)
                        
                        # Hi·ªÉn th·ªã params
                        st.write("##### Params")
                        st.json(run.data.params)
                        
                        # Hi·ªÉn th·ªã artifacts
                        artifacts = mlflow.list_artifacts(selected_run_id)
                        if artifacts:
                            st.write("##### Artifacts")
                            for artifact in artifacts:
                                st.write(f"- {artifact.path}")
                    else:
                        st.warning("Kh√¥ng c√≥ runs n√†o trong th√≠ nghi·ªám n√†y.")
                else:
                    st.warning("Kh√¥ng c√≥ th√≠ nghi·ªám n√†o ƒë∆∞·ª£c t√¨m th·∫•y.")
            except Exception as e:
                st.error(f"ƒê√£ x·∫£y ra l·ªói khi l·∫•y danh s√°ch th√≠ nghi·ªám: {e}")

if __name__ == "__main__":
    main()
